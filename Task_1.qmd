---
title: "Task_1"
format: pdf
editor: visual
---

# Intro

Importing the data set from github repo and loading libraries

```{r}
#| results: hide
#| warning: false
library(readr)
library(ggplot2)
library(reshape2)
library(corrplot)
library(dplyr)
library(tidyr)
library(ranger)
library(rpart)
library(rpart.plot)

url = "https://raw.githubusercontent.com/RaunakDune/3337_Fall2024_EDA/bf7b9ca17ed5e08ff25677c329ea1473cb935b49/Baseball_Databank_Teams_1871_2023_Modded.csv"

data = read.csv(url)
head(data, 3)
attach(data)
```

# 1. Covariance Matrices

Covariance matrices for HR, ERA, R, RA, SOA

```{r}
selected_data = data[, c("HR", "ERA","R", "RA", "SOA")]
covariance_matrix = cov(selected_data)

cov_melted = melt(covariance_matrix)

ggplot(cov_melted, aes(Var1, Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low = "white", mid = "lightblue", high = "blue", 
                       midpoint = 0, limit = c(min(cov_melted$value), max(cov_melted$value))) +
  theme_minimal() +
  labs(title = "Baseball Covariance Heatmap", x = "Attributes", y = "Attributes", fill = "Covariance") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  geom_text(aes(label = round(value, 2)), color = "black", size = 3)
```

# 1. Correlation Matrices

```{r}
correlation_matrix = cor(selected_data)

cor_melted = melt(correlation_matrix)

ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low = "white", mid = "lightblue", high = "blue",
                       limit = c(min(cor_melted$value), max(cor_melted$value))) +
  theme_minimal() +
  labs(title = "Baseball Correlation heatmap", x = "Attributes", y = "Attributes", fill = "Correlation") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  geom_text(aes(label = round(value, 2)), color = "black", size = 3)
```

# 1. Interpretation of Correlation and Covariance Matrices

SOA has a correlation of .80 with HR, suggesting that teams that strike out a lot of batters, also hit a lot of home runs. This could be because the strike outs are due to good pitchers, the same pitchers that batters will be practicing with, iron sharpening iron.

The next highest correlation is 0.75 between ERA and RA. This is expected since ERA is a measure of a pitcher's effectiveness. If the pitcher is less effective at striking batters out, meaning the pitcher has a higher ERA, then there will be more runs scored, and a higher RA.

Everything else is roughly 0.50 or less, and can be explained by domain knowledge.

# 2. Scatter Plot for AB/H and HA/BBA

AB = At bats, H = hits by batters, HA = hits allows, BBA = walks allowed

```{r}
scatter.smooth(AB, H)
scatter.smooth(HA, BBA)
```

At bats is a measure of how many times a team has had a batter at the plate. Hits tells us how many times a batter got a hit AND got to first base. If a batter hit the ball, and it was foul, it is not considered a hit. Only hits that result in placement on base count.

Based on our AB/H plot, there is a strong positive correlation between the two, which is to be expected. There seems to be more variability in clusters around 2000, 4000, and 4700+ at bats.

Walks allowed are recorded when a pitcher either hits a batter with the ball, or throws 4 balls outside of the strike zone without the batter swinging at them. Hits allowed is the offensive component of Hits. There seems to be a lot of variation between these two variables, though there seems to be a clear positive correlation with a large concentration at roughly between 1500 to 1750 hits allowed.

# 3. Two Teams + Astros Histograms

I will use the White Sox, Red Sox, and Astros. The histograms will be for the years 2004-2013 and 2014-2023. I will measure the High, Low, and Average.

```{r}
team_hist_data_2013_Boston = data %>%
  filter(yearID <= 2013 & yearID >= 2004 & (name == "Boston Red Sox" | name == "Houston Astros")) %>%
  select( name, TARGET)


team_hist_data_2013_Chicago = data %>%
  filter(yearID <= 2013 & yearID >= 2004 & (name == "Chicago White Sox" | name == "Houston Astros")) %>%
  select(name, TARGET)


ggplot(team_hist_data_2013_Chicago, aes(x = TARGET, fill = name)) + 
  geom_bar(position = "dodge", color = "#002147", width = 0.2, alpha = 0.9) + 
  scale_fill_manual(values = c("Chicago White Sox" = "#C4CED4", "Houston Astros" = "#D6492A")) +
  labs(x = "Target", y = "Frequency", title = "Target Frequencies of White Sox & Astros 2004-2013") +
  labs(fill = "Team") + 
  theme_minimal() +
    theme(
    panel.grid.major = element_blank(),     
    panel.grid.minor = element_blank(),      
    panel.background = element_rect(fill = "#27252F")
    ) +
    geom_bar(aes(x = TARGET, fill = name), position = "dodge", width = 0.22, alpha = 0.1)

```

The White Sox had more average targets than the Astros and fewer low targets as well.

```{r}

ggplot(team_hist_data_2013_Boston, aes(x = TARGET, fill = name)) + 
  geom_bar(position = "dodge", color = "#002147", width = 0.2, alpha = 0.9) + 
  scale_fill_manual(values = c("Boston Red Sox" = "#BD3039", "Houston Astros" = "#D6492A")) +
  labs(x = "Target", y = "Frequency", title = "Target Frequencies of Red Sox & Astros 2004-2013") +
  labs(fill = "Team") + 
  theme_minimal() +
    theme(
    panel.grid.major = element_blank(),     
    panel.grid.minor = element_blank(),      
    panel.background = element_rect(fill = "#27252F")
    ) +
    geom_bar(aes(x = TARGET, fill = name), position = "dodge", width = 0.22, alpha = 0.1)
```

The Red Sox had no low season targets within this 10 year period, and had higher average targets while the Astros had mixed seasons.

# 4. Box plots for BB and SB

I will create box plots for BB and SB, each with TARGET ave, low, hi, and then each with the whole data set.

BB is walks by batters, while SB is stolen bases.

```{r}
#| warning: false
box_sb_hi = data %>%
  filter(TARGET == "HIGH") %>%
  select(TARGET, SB)

box_sb_ave = data %>%
  filter(TARGET == "AVERAGE") %>%
  select(TARGET, SB)

box_sb_low = data %>%
  filter(TARGET == "LOW") %>%
  select(TARGET, SB)



box_bb_hi = data %>%
  filter(TARGET == "HIGH") %>%
  select(TARGET, BB)

box_bb_ave = data %>%
  filter(TARGET == "AVERAGE") %>%
  select(TARGET, BB)

box_bb_low = data %>%
  filter(TARGET == "LOW") %>%
  select(TARGET, BB)


box_bb_all = data %>%
  select(TARGET, BB) %>%
  arrange(TARGET)

box_sb_all = data %>%
  select(TARGET, SB) %>%
  arrange(TARGET)


ggplot(box_sb_hi, aes(x = TARGET, y = SB)) + 
  geom_boxplot() + labs(title ="Target HIGH SB boxplot") +
  theme(
    panel.grid.minor = element_line(color = "black"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )

ggplot(box_sb_ave, aes(x = TARGET, y = SB)) +
  geom_boxplot() +
  labs(title ="Target AVERAGE SB boxplot") +
  theme(
    panel.grid.minor = element_line(color = "black"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )

ggplot(box_sb_low, aes(x = TARGET, y = SB)) +
  geom_boxplot() +
  labs(title ="Target LOW SB boxplot") +
  theme(
    panel.grid.minor = element_line(color = "black"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )

ggplot(box_bb_hi, aes(x = TARGET, y = BB)) + 
  geom_boxplot() + labs(title ="Target HIGH BB boxplot") +
  theme(
    panel.grid.minor = element_line(color = "black"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )

ggplot(box_bb_ave, aes(x = TARGET, y = BB)) + 
  geom_boxplot() + labs(title ="Target AVE BB boxplot") +
  theme(
    panel.grid.minor = element_line(color = "black"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )

ggplot(box_bb_low, aes(x = TARGET, y = BB)) + 
  geom_boxplot() + labs(title ="Target LOW BB boxplot") + 
  theme(
    panel.grid.minor = element_line(color = "black"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )

ggplot(box_bb_all, aes(x = TARGET, y = BB)) + 
  geom_boxplot() + labs(title ="BB boxplot") +
  theme(
    panel.grid.minor = element_line(color = "black"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )

ggplot(box_sb_all, aes(x = TARGET, y = SB)) + 
  geom_boxplot() + labs(title ="SB boxplot") +
  theme(
    panel.grid.minor = element_line(color = "black"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )
```

For seasons with the HIGH target, stolen bases seems to reach its median at roughly 100 stolen bases, which is slightly above the AVERAGE target stolen bases median. The average target seasons seem to have a much tighter distribution and far more outliers than the others.

The average target seasons seemed to have a very tight distribution with a median barely above 500. The low target seasons had a median of 425 and the high 525. The latter two also had much wider distributions. There are very few outliers for the high target group.

On average, BB seems to have a fairly wide distribution with the fewest amount of outliers, all being below the lower quartile by a significant difference. The Average seems to vary widely, with lots of outliers.

# 5. Supervised Scatterplot for HB/SO, CG/SHO, IPOuts/DP

```{r}
#| warning: false
supervised_data = data %>%
  select(HBP, SO, CG, SHO, IPouts, DP, TARGET)

ggplot(supervised_data, aes(x = HBP, y = SO, color = TARGET)) +
  geom_point(alpha = 0.8) +
  labs(title = "HB/SO Supervised Scatter", y = "Strike Outs", x = "Batters Hit by Pitch") +
  theme_minimal() +
    theme(
    panel.grid.minor = element_line(color = "white"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  ) +
  scale_x_continuous(breaks = seq(0, 200, 20)) +
  scale_y_continuous(breaks = seq(0, 2000, 200))


ggplot(supervised_data, aes(x = CG, y = SHO, color = TARGET)) +
  geom_point(alpha = 0.8) +
  labs(title = "CG/SHO Supervised Scatter", y = "SHO", x = "CG") +
  theme_minimal() +
  theme(
    panel.grid.minor = element_line(color = "white"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )


ggplot(supervised_data, aes(x = IPouts, y = DP, color = TARGET)) +
  geom_point(alpha = 0.8) +
  labs(title = "IPOuts DP Supervised Scatter", y = "DP", x = "IPOuts") +
  theme_minimal() +
  theme(
    panel.grid.minor = element_line(color = "white"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )
```

Predicting target, based on the above scatterplots, will be very difficult. Each target is fairly well distributed through the x and y axes. The HB/SO plot seems to follow a curved C shaped pattern, though it might not indicate any relationship. The CG/SHO plot has its points evenly distributed from 0-75 CG and 0-15 SHO, the points begin to become farther apart. It may be slightly easier to predict using the IPOuts and DP plot, with the exception of values above 4200 where the values become more unpredictable.

# 6. Density Plots W v E

We will view density plots against Win Percentage W, and Errors per game E

```{r}
#| warning: false
density_data = data %>%
  select(W, E, TARGET)

ggplot(density_data, aes(x = W, color = as.factor(TARGET))) +
  geom_density(fill = "#D6492A", alpha = 0.5, size = 2) +
  theme_minimal() +
  labs(x = "Win Percentage", y = "Density") +
  theme(
    panel.grid.minor = element_line(color = "white"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )

ggplot(density_data, aes(x = E, color = as.factor(TARGET))) +
  geom_density(fill = "#D6492A", alpha = 0.5, size = 2) +
  theme_minimal() +
  labs(x = "Errors Per Game", y = "Density") +
  theme(
    panel.grid.minor = element_line(color = "white"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )
```

There seems to be a very small difference in density for E when comparing high and low Target's. Maybe because of more conservative play? If a variable can be engineered that represents the aggressiveness of a team, it can be used to validate that hypothesis. The win percentage density is as expected, a bimodal density plot where the average is in the middle of both peaks.

# 7. World Series Wins Table

```{r}
#| warning: false
table(name[WSWin=="Y"], TARGET[WSWin=="Y"])

world_series <- data %>%
  filter(WSWin == "Y") %>%
  select(name, WSWin) %>%
  mutate(
    LOW = sum(TARGET == "LOW"),
    AVERAGE = sum(TARGET == "AVERAGE"),
    HIGH = sum(TARGET == "HIGH")  
  )


world_series = world_series %>%
  left_join(data %>% select(name, W, L), by = "name")


teams = unique(world_series$name)

for (team in teams) {
  team_data = world_series %>% filter(name == team)
  
  looped_plots = ggplot(team_data) +
    geom_histogram(aes(x = W, fill = "Wins"), binwidth = 1, alpha = 0.6, color = "black") +
    geom_histogram(aes(x = L, fill = "Losses"), binwidth = 1, alpha = 0.6, color = "black") +
    scale_fill_manual(values = c("blue", "red"), name = "Type", labels = c("Wins", "Losses")) +
    labs(x = "Count", y = "Frequency", title = paste("Wins and Losses for", team)) +
    theme_minimal() +
    theme(
    panel.grid.minor = element_line(color = "white"),
    plot.background = element_rect(fill = "black"),
    axis.text = element_text(color = "white"),             
    axis.title = element_text(color = "white"),         
    plot.title = element_text(color = "white", size = 16),
    legend.text = element_text(color = "white")
  )
  
  print(looped_plots)
}



```

The table shows no lows which makes sense because the teams must be able to make higher winning percentages in order to win the world series. Most of these winning percentages are average though, and the frequency of these Highs and Average stay under 4 for the most part. The histograms are highly variable but many follow a clear trend of a peak or peak(s) for both wins and losses. And wins and losses tend to follow the same pattern per team. If wins for a team is peak shaped the losses are too. If wins follow no pattern, the losses follow no pattern.

# 8. Transformed Data

```{r}
transformed_data = data %>%
  mutate(
    z_H = (H - mean(H, na.rm = TRUE)) / sd(H, na.rm = TRUE),
    z_SO = (SO - mean(SO, na.rm = TRUE)) / sd(SO, na.rm = TRUE),
    z_SOA = (SOA - mean(SOA, na.rm = TRUE)) / sd(SOA, na.rm = TRUE),
    z_SHO = (SHO - mean(SHO, na.rm = TRUE)) / sd(SHO, na.rm = TRUE),
    z_FP = (FP - mean(FP, na.rm = TRUE)) / sd(FP, na.rm = TRUE)
  )

lm_model = lm(WP ~ z_H + z_SO + z_SOA + z_SHO + z_FP, data = transformed_data)

model_summary = summary(lm_model)

summary_table = data.frame(c(model_summary$r.squared, model_summary$coefficients))

model_summary
```

z_FP and z_SO are negatively correlated with the win percentage attribute, while the others are positively correlated. z_FP is not significant in the model. And the model only accounts for 30.6% of the variation.

# 9. Decision Trees

```{r}
subset_data = data[, 9:ncol(data)]
subset_data = na.omit(subset_data)
subset_data$TARGET = as.factor(subset_data$TARGET)

set.seed(123)

train_index = sample(1:nrow(subset_data), 0.8 * nrow(subset_data))
train_data = subset_data[train_index, ]
test_data = subset_data[-train_index, ]

tree_model1 = rpart(TARGET ~ ., data = train_data, control = rpart.control(maxdepth = 5))
tree_model2 = rpart(TARGET ~ ., data = train_data, control = rpart.control(minsplit = 10))
tree_model3 = rpart(TARGET ~ ., data = train_data, control = rpart.control(cp = 0.01))

rpart.plot(tree_model1, main = "Decision Tree Model 1 (Max Depth = 5)")
rpart.plot(tree_model2, main = "Decision Tree Model 2 (Min Split = 10)")
rpart.plot(tree_model3, main = "Decision Tree Model 3 (CP = 0.01)")

calculate_accuracy = function(model, data) {
  predictions = predict(model, data, type = "class")
  accuracy = sum(predictions == data$TARGET) / nrow(data)
  return(accuracy)
}

train_acc_model1 = calculate_accuracy(tree_model1, train_data)
test_acc_model1 = calculate_accuracy(tree_model1, test_data)

train_acc_model2 = calculate_accuracy(tree_model2, train_data)
test_acc_model2 = calculate_accuracy(tree_model2, test_data)

train_acc_model3 = calculate_accuracy(tree_model3, train_data)
test_acc_model3 = calculate_accuracy(tree_model3, test_data)

cat("Model 1 Training Accuracy: ", train_acc_model1, "\n")
cat("Model 1 Testing Accuracy: ", test_acc_model1, "\n")

cat("Model 2 Training Accuracy: ", train_acc_model2, "\n")
cat("Model 2 Testing Accuracy: ", test_acc_model2, "\n")

cat("Model 3 Training Accuracy: ", train_acc_model3, "\n")
cat("Model 3 Testing Accuracy: ", test_acc_model3, "\n")

```

By capping the depth for the first model, we ensure that the tree remains relatively simple and doesn’t overfit the training data by learning highly specific, potentially noisy patterns. In essence, it prevents the tree from becoming overly complex while still being able to capture significant patterns in the data.

The second model was designed to prevent the tree from splitting too often by enforcing a minimum node size of 10 (i.e., a split will only happen if at least 10 observations are present in a node). By doing this, we reduce the likelihood of small, insignificant splits that might overfit to minor fluctuations in the data.

The third model was designed so that a smaller CP (like 0.01) allows the model to prune less impactful splits, reducing the number of nodes in the tree. This approach helps ensure that only the most meaningful splits remain.

The decision trees highlight the importance of key attributes like **Runs Allowed (RA)**, consistently the first split, indicating that preventing runs is the most crucial factor in classification. Some other important attributes include **Saves (SV)**, **Home Runs (HR)**, and **Strikeouts (SO)**.

# Conclusion

Write a conclusion (at most 13 sentences!) summarizing the most important findings

of this task; in particular, address the findings obtained related to predicting a

successful team (both by Rank and Target) using attributes 7-30. If possible, write

about which attributes seem useful for predicting good teams and what you as an

individual can learn from this dataset! **6 points (and up to 4 extra points)**
